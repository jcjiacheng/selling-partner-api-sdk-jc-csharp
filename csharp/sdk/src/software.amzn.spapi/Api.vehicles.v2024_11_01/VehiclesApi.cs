/*
 * The Selling Partner API for Automotive.
 *
 * The Selling Partner API for Automotive provides programmatic access to information needed by selling partners to provide compatibility information about their listed products.
 *
 * The version of the OpenAPI document: 2024-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using software.amzn.spapi.Client;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Model.vehicles.v2024_11_01;

namespace software.amzn.spapi.Api.vehicles.v2024_11_01
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVehiclesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the latest collection of vehicles
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="vehicleType">An identifier for vehicle type.</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="updatedAfter">Date in ISO 8601 format, if provided only vehicles which are modified/added to Amazon&#39;s catalog after this date will be returned. (optional)</param>
        /// <returns>VehiclesResponse</returns>
        VehiclesResponse GetVehicles (string marketplaceId, string vehicleType, string? pageToken = null, string? updatedAfter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the latest collection of vehicles
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="vehicleType">An identifier for vehicle type.</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="updatedAfter">Date in ISO 8601 format, if provided only vehicles which are modified/added to Amazon&#39;s catalog after this date will be returned. (optional)</param>
        /// <returns>ApiResponse of VehiclesResponse</returns>
        ApiResponse<VehiclesResponse> GetVehiclesWithHttpInfo (string marketplaceId, string vehicleType, string? pageToken = null, string? updatedAfter = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the latest collection of vehicles
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="vehicleType">An identifier for vehicle type.</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="updatedAfter">Date in ISO 8601 format, if provided only vehicles which are modified/added to Amazon&#39;s catalog after this date will be returned. (optional)</param>
        /// <returns>Task of VehiclesResponse</returns>
        System.Threading.Tasks.Task<VehiclesResponse> GetVehiclesAsync (string marketplaceId, string vehicleType, string? pageToken = null, string? updatedAfter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the latest collection of vehicles
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="vehicleType">An identifier for vehicle type.</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="updatedAfter">Date in ISO 8601 format, if provided only vehicles which are modified/added to Amazon&#39;s catalog after this date will be returned. (optional)</param>
        /// <returns>Task of ApiResponse (VehiclesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VehiclesResponse>> GetVehiclesAsyncWithHttpInfo (string marketplaceId, string vehicleType, string? pageToken = null, string? updatedAfter = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VehiclesApi : IVehiclesApi
    {
        private software.amzn.spapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VehiclesApi(software.amzn.spapi.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = software.amzn.spapi.Client.Configuration.DefaultExceptionFactory;
        }

        IReadableConfiguration IApiAccessor.Configuration 
        {
            get => Configuration;  // Implicit upcast to interface
            set => Configuration = (software.amzn.spapi.Client.Configuration)value;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public software.amzn.spapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public software.amzn.spapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Get the latest collection of vehicles
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="vehicleType">An identifier for vehicle type.</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="updatedAfter">Date in ISO 8601 format, if provided only vehicles which are modified/added to Amazon&#39;s catalog after this date will be returned. (optional)</param>
        /// <returns>VehiclesResponse</returns>
        public VehiclesResponse GetVehicles (string marketplaceId, string vehicleType, string? pageToken = null, string? updatedAfter = null)
        {
             ApiResponse<VehiclesResponse> localVarResponse = GetVehiclesWithHttpInfo(marketplaceId, vehicleType, pageToken, updatedAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the latest collection of vehicles
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="vehicleType">An identifier for vehicle type.</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="updatedAfter">Date in ISO 8601 format, if provided only vehicles which are modified/added to Amazon&#39;s catalog after this date will be returned. (optional)</param>
        /// <returns>ApiResponse of VehiclesResponse</returns>
        public ApiResponse< VehiclesResponse > GetVehiclesWithHttpInfo (string marketplaceId, string vehicleType, string? pageToken = null, string? updatedAfter = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling VehiclesApi->GetVehicles");
            // verify the required parameter 'vehicleType' is set
            if (vehicleType == null)
                throw new ApiException(400, "Missing required parameter 'vehicleType' when calling VehiclesApi->GetVehicles");

            var localVarPath = "/catalog/2024-11-01/automotive/vehicles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (vehicleType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vehicleType", vehicleType)); // query parameter
            if (updatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatedAfter", updatedAfter)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVehicles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VehiclesResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (VehiclesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VehiclesResponse)));
        }

        /// <summary>
        ///  Get the latest collection of vehicles
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="vehicleType">An identifier for vehicle type.</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="updatedAfter">Date in ISO 8601 format, if provided only vehicles which are modified/added to Amazon&#39;s catalog after this date will be returned. (optional)</param>
        /// <returns>Task of VehiclesResponse</returns>
        public async System.Threading.Tasks.Task<VehiclesResponse> GetVehiclesAsync (string marketplaceId, string vehicleType, string? pageToken = null, string? updatedAfter = null)
        {
             ApiResponse<VehiclesResponse> localVarResponse = await GetVehiclesAsyncWithHttpInfo(marketplaceId, vehicleType, pageToken, updatedAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the latest collection of vehicles
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">An identifier for the marketplace in which the resource operates.</param>
        /// <param name="vehicleType">An identifier for vehicle type.</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="updatedAfter">Date in ISO 8601 format, if provided only vehicles which are modified/added to Amazon&#39;s catalog after this date will be returned. (optional)</param>
        /// <returns>Task of ApiResponse (VehiclesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VehiclesResponse>> GetVehiclesAsyncWithHttpInfo (string marketplaceId, string vehicleType, string? pageToken = null, string? updatedAfter = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling VehiclesApi->GetVehicles");
            // verify the required parameter 'vehicleType' is set
            if (vehicleType == null)
                throw new ApiException(400, "Missing required parameter 'vehicleType' when calling VehiclesApi->GetVehicles");

            var localVarPath = "/catalog/2024-11-01/automotive/vehicles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter
            if (vehicleType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vehicleType", vehicleType)); // query parameter
            if (updatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatedAfter", updatedAfter)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVehicles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VehiclesResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (VehiclesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VehiclesResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public VehiclesApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                software.amzn.spapi.Client.Configuration configuration = new software.amzn.spapi.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.initializeApiClient();
                configuration.Timeout = 100000;

                return new VehiclesApi(configuration);
            }
        }
        
        private static Multimap<string, string> ConvertHeadersToMultimap(RestResponse response)
        {
            var multimap = new Multimap<string, string>();
            foreach (var header in response.Headers)
            {
                multimap.Add(header.Name, header.Value?.ToString());
            }
            return multimap;
        }


        private static RestSharp.Method ChangeHttpMethod(String httpMethod) {
            switch(httpMethod) {
                case "GET":
                    // GET logic
                    return Method.Get;
                case "POST":
                    // POST logic
                    return Method.Post;
                case "DELETE":
                    return Method.Delete;
                case "PUT":
                    return Method.Put;
                case "PATCH":
                    return Method.Patch;
                case "OPTIONS":
                    return Method.Options;
            }
            return Method.Head;
        }

    }
}
