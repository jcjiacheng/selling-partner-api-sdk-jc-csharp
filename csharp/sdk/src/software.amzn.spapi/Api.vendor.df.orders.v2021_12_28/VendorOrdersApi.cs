/*
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using software.amzn.spapi.Client;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Model.vendor.df.orders.v2021_12_28;

namespace software.amzn.spapi.Api.vendor.df.orders.v2021_12_28
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVendorOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>Order</returns>
        Order GetOrder (string purchaseOrderNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetOrderWithHttpInfo (string purchaseOrderNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to &quot;true&quot;)</param>
        /// <returns>OrderList</returns>
        OrderList GetOrders (DateTime createdAfter, DateTime createdBefore, string? shipFromPartyId = null, string? status = null, long? limit = null, string? sortOrder = null, string? nextToken = null, bool? includeDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to &quot;true&quot;)</param>
        /// <returns>ApiResponse of OrderList</returns>
        ApiResponse<OrderList> GetOrdersWithHttpInfo (DateTime createdAfter, DateTime createdBefore, string? shipFromPartyId = null, string? status = null, long? limit = null, string? sortOrder = null, string? nextToken = null, bool? includeDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body containing the acknowledgement to an order</param>
        /// <returns>TransactionId</returns>
        TransactionId SubmitAcknowledgement (SubmitAcknowledgementRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body containing the acknowledgement to an order</param>
        /// <returns>ApiResponse of TransactionId</returns>
        ApiResponse<TransactionId> SubmitAcknowledgementWithHttpInfo (SubmitAcknowledgementRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> GetOrderAsync (string purchaseOrderNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderAsyncWithHttpInfo (string purchaseOrderNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to &quot;true&quot;)</param>
        /// <returns>Task of OrderList</returns>
        System.Threading.Tasks.Task<OrderList> GetOrdersAsync (DateTime createdAfter, DateTime createdBefore, string? shipFromPartyId = null, string? status = null, long? limit = null, string? sortOrder = null, string? nextToken = null, bool? includeDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to &quot;true&quot;)</param>
        /// <returns>Task of ApiResponse (OrderList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderList>> GetOrdersAsyncWithHttpInfo (DateTime createdAfter, DateTime createdBefore, string? shipFromPartyId = null, string? status = null, long? limit = null, string? sortOrder = null, string? nextToken = null, bool? includeDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body containing the acknowledgement to an order</param>
        /// <returns>Task of TransactionId</returns>
        System.Threading.Tasks.Task<TransactionId> SubmitAcknowledgementAsync (SubmitAcknowledgementRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body containing the acknowledgement to an order</param>
        /// <returns>Task of ApiResponse (TransactionId)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionId>> SubmitAcknowledgementAsyncWithHttpInfo (SubmitAcknowledgementRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VendorOrdersApi : IVendorOrdersApi
    {
        private software.amzn.spapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VendorOrdersApi(software.amzn.spapi.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = software.amzn.spapi.Client.Configuration.DefaultExceptionFactory;
        }

        IReadableConfiguration IApiAccessor.Configuration 
        {
            get => Configuration;  // Implicit upcast to interface
            set => Configuration = (software.amzn.spapi.Client.Configuration)value;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public software.amzn.spapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public software.amzn.spapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>Order</returns>
        public Order GetOrder (string purchaseOrderNumber)
        {
             ApiResponse<Order> localVarResponse = GetOrderWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > GetOrderWithHttpInfo (string purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling VendorOrdersApi->GetOrder");

            var localVarPath = "/vendor/directFulfillment/orders/2021-12-28/purchaseOrders/{purchaseOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        ///  Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> GetOrderAsync (string purchaseOrderNumber)
        {
             ApiResponse<Order> localVarResponse = await GetOrderAsyncWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderAsyncWithHttpInfo (string purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling VendorOrdersApi->GetOrder");

            var localVarPath = "/vendor/directFulfillment/orders/2021-12-28/purchaseOrders/{purchaseOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        ///  Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to &quot;true&quot;)</param>
        /// <returns>OrderList</returns>
        public OrderList GetOrders (DateTime createdAfter, DateTime createdBefore, string? shipFromPartyId = null, string? status = null, long? limit = null, string? sortOrder = null, string? nextToken = null, bool? includeDetails = null)
        {
             ApiResponse<OrderList> localVarResponse = GetOrdersWithHttpInfo(createdAfter, createdBefore, shipFromPartyId, status, limit, sortOrder, nextToken, includeDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to &quot;true&quot;)</param>
        /// <returns>ApiResponse of OrderList</returns>
        public ApiResponse< OrderList > GetOrdersWithHttpInfo (DateTime createdAfter, DateTime createdBefore, string? shipFromPartyId = null, string? status = null, long? limit = null, string? sortOrder = null, string? nextToken = null, bool? includeDetails = null)
        {
            // verify the required parameter 'createdAfter' is set
            if (createdAfter == null)
                throw new ApiException(400, "Missing required parameter 'createdAfter' when calling VendorOrdersApi->GetOrders");
            // verify the required parameter 'createdBefore' is set
            if (createdBefore == null)
                throw new ApiException(400, "Missing required parameter 'createdBefore' when calling VendorOrdersApi->GetOrders");

            var localVarPath = "/vendor/directFulfillment/orders/2021-12-28/purchaseOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "pagination",
                "orders"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipFromPartyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipFromPartyId", shipFromPartyId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (includeDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDetails", includeDetails)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderList>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (OrderList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderList)));
        }

        /// <summary>
        ///  Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to &quot;true&quot;)</param>
        /// <returns>Task of OrderList</returns>
        public async System.Threading.Tasks.Task<OrderList> GetOrdersAsync (DateTime createdAfter, DateTime createdBefore, string? shipFromPartyId = null, string? status = null, long? limit = null, string? sortOrder = null, string? nextToken = null, bool? includeDetails = null)
        {
             ApiResponse<OrderList> localVarResponse = await GetOrdersAsyncWithHttpInfo(createdAfter, createdBefore, shipFromPartyId, status, limit, sortOrder, nextToken, includeDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to &quot;true&quot;)</param>
        /// <returns>Task of ApiResponse (OrderList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderList>> GetOrdersAsyncWithHttpInfo (DateTime createdAfter, DateTime createdBefore, string? shipFromPartyId = null, string? status = null, long? limit = null, string? sortOrder = null, string? nextToken = null, bool? includeDetails = null)
        {
            // verify the required parameter 'createdAfter' is set
            if (createdAfter == null)
                throw new ApiException(400, "Missing required parameter 'createdAfter' when calling VendorOrdersApi->GetOrders");
            // verify the required parameter 'createdBefore' is set
            if (createdBefore == null)
                throw new ApiException(400, "Missing required parameter 'createdBefore' when calling VendorOrdersApi->GetOrders");

            var localVarPath = "/vendor/directFulfillment/orders/2021-12-28/purchaseOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "pagination",
                "orders"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipFromPartyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipFromPartyId", shipFromPartyId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (includeDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDetails", includeDetails)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderList>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (OrderList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderList)));
        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body containing the acknowledgement to an order</param>
        /// <returns>TransactionId</returns>
        public TransactionId SubmitAcknowledgement (SubmitAcknowledgementRequest body)
        {
             ApiResponse<TransactionId> localVarResponse = SubmitAcknowledgementWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body containing the acknowledgement to an order</param>
        /// <returns>ApiResponse of TransactionId</returns>
        public ApiResponse< TransactionId > SubmitAcknowledgementWithHttpInfo (SubmitAcknowledgementRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VendorOrdersApi->SubmitAcknowledgement");

            var localVarPath = "/vendor/directFulfillment/orders/2021-12-28/acknowledgements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitAcknowledgement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionId>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (TransactionId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionId)));
        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body containing the acknowledgement to an order</param>
        /// <returns>Task of TransactionId</returns>
        public async System.Threading.Tasks.Task<TransactionId> SubmitAcknowledgementAsync (SubmitAcknowledgementRequest body)
        {
             ApiResponse<TransactionId> localVarResponse = await SubmitAcknowledgementAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body containing the acknowledgement to an order</param>
        /// <returns>Task of ApiResponse (TransactionId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionId>> SubmitAcknowledgementAsyncWithHttpInfo (SubmitAcknowledgementRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VendorOrdersApi->SubmitAcknowledgement");

            var localVarPath = "/vendor/directFulfillment/orders/2021-12-28/acknowledgements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitAcknowledgement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionId>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (TransactionId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionId)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public VendorOrdersApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                software.amzn.spapi.Client.Configuration configuration = new software.amzn.spapi.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.initializeApiClient();
                configuration.Timeout = 100000;

                return new VendorOrdersApi(configuration);
            }
        }
        
        private static Multimap<string, string> ConvertHeadersToMultimap(RestResponse response)
        {
            var multimap = new Multimap<string, string>();
            foreach (var header in response.Headers)
            {
                multimap.Add(header.Name, header.Value?.ToString());
            }
            return multimap;
        }


        private static RestSharp.Method ChangeHttpMethod(String httpMethod) {
            switch(httpMethod) {
                case "GET":
                    // GET logic
                    return Method.Get;
                case "POST":
                    // POST logic
                    return Method.Post;
                case "DELETE":
                    return Method.Delete;
                case "PUT":
                    return Method.Put;
                case "PATCH":
                    return Method.Patch;
                case "OPTIONS":
                    return Method.Options;
            }
            return Method.Head;
        }

    }
}
