/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using software.amzn.spapi.Client;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Model.shipping.v2;

namespace software.amzn.spapi.Api.shipping.v2
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShippingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>CancelShipmentResponse</returns>
        CancelShipmentResponse CancelShipment (string shipmentId, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of CancelShipmentResponse</returns>
        ApiResponse<CancelShipmentResponse> CancelShipmentWithHttpInfo (string shipmentId, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will be used to create claim for single eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for the createClaim operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>CreateClaimResponse</returns>
        CreateClaimResponse CreateClaim (CreateClaimRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will be used to create claim for single eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for the createClaim operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of CreateClaimResponse</returns>
        ApiResponse<CreateClaimResponse> CreateClaimWithHttpInfo (CreateClaimRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">DirectPurchaseRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="locale">The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags.  (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>DirectPurchaseResponse</returns>
        DirectPurchaseResponse DirectPurchaseShipment (DirectPurchaseRequest body, string? xAmznIdempotencyKey = null, string? locale = null, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">DirectPurchaseRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="locale">The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags.  (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of DirectPurchaseResponse</returns>
        ApiResponse<DirectPurchaseResponse> DirectPurchaseShipmentWithHttpInfo (DirectPurchaseRequest body, string? xAmznIdempotencyKey = null, string? locale = null, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GenerateCollectionFormRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GenerateCollectionFormResponse</returns>
        GenerateCollectionFormResponse GenerateCollectionForm (GenerateCollectionFormRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GenerateCollectionFormRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GenerateCollectionFormResponse</returns>
        ApiResponse<GenerateCollectionFormResponse> GenerateCollectionFormWithHttpInfo (GenerateCollectionFormRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessPointTypes">Access point types</param>
        /// <param name="countryCode">Country code for access point</param>
        /// <param name="postalCode">postal code for access point</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetAccessPointsResponse</returns>
        GetAccessPointsResponse GetAccessPoints (List<string> accessPointTypes, string countryCode, string postalCode, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessPointTypes">Access point types</param>
        /// <param name="countryCode">Country code for access point</param>
        /// <param name="postalCode">postal code for access point</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetAccessPointsResponse</returns>
        ApiResponse<GetAccessPointsResponse> GetAccessPointsWithHttpInfo (List<string> accessPointTypes, string countryCode, string postalCode, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestToken">The request token returned in the response to the getRates operation.</param>
        /// <param name="rateId">The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetAdditionalInputsResponse</returns>
        GetAdditionalInputsResponse GetAdditionalInputs (string requestToken, string rateId, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestToken">The request token returned in the response to the getRates operation.</param>
        /// <param name="rateId">The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetAdditionalInputsResponse</returns>
        ApiResponse<GetAdditionalInputsResponse> GetAdditionalInputsWithHttpInfo (string requestToken, string rateId, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetCarrierAccountFormInputsResponse</returns>
        GetCarrierAccountFormInputsResponse GetCarrierAccountFormInputs (string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetCarrierAccountFormInputsResponse</returns>
        ApiResponse<GetCarrierAccountFormInputsResponse> GetCarrierAccountFormInputsWithHttpInfo (string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCarrierAccountsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetCarrierAccountsResponse</returns>
        GetCarrierAccountsResponse GetCarrierAccounts (GetCarrierAccountsRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCarrierAccountsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetCarrierAccountsResponse</returns>
        ApiResponse<GetCarrierAccountsResponse> GetCarrierAccountsWithHttpInfo (GetCarrierAccountsRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFormId">collection form Id to reprint a collection.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetCollectionFormResponse</returns>
        GetCollectionFormResponse GetCollectionForm (string collectionFormId, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFormId">collection form Id to reprint a collection.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetCollectionFormResponse</returns>
        ApiResponse<GetCollectionFormResponse> GetCollectionFormWithHttpInfo (string collectionFormId, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCollectionFormHistoryRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetCollectionFormHistoryResponse</returns>
        GetCollectionFormHistoryResponse GetCollectionFormHistory (GetCollectionFormHistoryRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCollectionFormHistoryRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetCollectionFormHistoryResponse</returns>
        ApiResponse<GetCollectionFormHistoryResponse> GetCollectionFormHistoryWithHttpInfo (GetCollectionFormHistoryRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetRatesRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetRatesResponse</returns>
        GetRatesResponse GetRates (GetRatesRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetRatesRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetRatesResponse</returns>
        ApiResponse<GetRatesResponse> GetRatesWithHttpInfo (GetRatesRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="packageClientReferenceId">The package client reference identifier originally provided in the request body parameter for the getRates operation.</param>
        /// <param name="format">The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)</param>
        /// <param name="dpi">The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetShipmentDocumentsResponse</returns>
        GetShipmentDocumentsResponse GetShipmentDocuments (string shipmentId, string packageClientReferenceId, string? format = null, decimal? dpi = null, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="packageClientReferenceId">The package client reference identifier originally provided in the request body parameter for the getRates operation.</param>
        /// <param name="format">The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)</param>
        /// <param name="dpi">The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetShipmentDocumentsResponse</returns>
        ApiResponse<GetShipmentDocumentsResponse> GetShipmentDocumentsWithHttpInfo (string shipmentId, string packageClientReferenceId, string? format = null, decimal? dpi = null, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingId">A carrier-generated tracking identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="carrierId">A carrier identifier originally returned by the getRates operation for the selected rate.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetTrackingResponse</returns>
        GetTrackingResponse GetTracking (string trackingId, string carrierId, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingId">A carrier-generated tracking identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="carrierId">A carrier identifier originally returned by the getRates operation for the selected rate.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetTrackingResponse</returns>
        ApiResponse<GetTrackingResponse> GetTrackingWithHttpInfo (string trackingId, string carrierId, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetUmanifestedShipmentsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetUnmanifestedShipmentsResponse</returns>
        GetUnmanifestedShipmentsResponse GetUnmanifestedShipments (GetUnmanifestedShipmentsRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetUmanifestedShipmentsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetUnmanifestedShipmentsResponse</returns>
        ApiResponse<GetUnmanifestedShipmentsResponse> GetUnmanifestedShipmentsWithHttpInfo (GetUnmanifestedShipmentsRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>LinkCarrierAccountResponse</returns>
        LinkCarrierAccountResponse LinkCarrierAccount (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of LinkCarrierAccountResponse</returns>
        ApiResponse<LinkCarrierAccountResponse> LinkCarrierAccountWithHttpInfo (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>LinkCarrierAccountResponse</returns>
        LinkCarrierAccountResponse LinkCarrierAccount_0 (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of LinkCarrierAccountResponse</returns>
        ApiResponse<LinkCarrierAccountResponse> LinkCarrierAccount_0WithHttpInfo (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OneClickShipmentRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>OneClickShipmentResponse</returns>
        OneClickShipmentResponse OneClickShipment (OneClickShipmentRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OneClickShipmentRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of OneClickShipmentResponse</returns>
        ApiResponse<OneClickShipmentResponse> OneClickShipmentWithHttpInfo (OneClickShipmentRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \&quot;TOKEN_EXPIRED\&quot;. If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PurchaseShipmentRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>PurchaseShipmentResponse</returns>
        PurchaseShipmentResponse PurchaseShipment (PurchaseShipmentRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \&quot;TOKEN_EXPIRED\&quot;. If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PurchaseShipmentRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of PurchaseShipmentResponse</returns>
        ApiResponse<PurchaseShipmentResponse> PurchaseShipmentWithHttpInfo (PurchaseShipmentRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API submits the NDR (Non-delivery Report) Feedback for any eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for ndrFeedback operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns></returns>
        void SubmitNdrFeedback (SubmitNdrFeedbackRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API submits the NDR (Non-delivery Report) Feedback for any eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for ndrFeedback operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitNdrFeedbackWithHttpInfo (SubmitNdrFeedbackRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">carrier Id to unlink with merchant.</param>
        /// <param name="body">UnlinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>UnlinkCarrierAccountResponse</returns>
        UnlinkCarrierAccountResponse UnlinkCarrierAccount (string carrierId, UnlinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">carrier Id to unlink with merchant.</param>
        /// <param name="body">UnlinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of UnlinkCarrierAccountResponse</returns>
        ApiResponse<UnlinkCarrierAccountResponse> UnlinkCarrierAccountWithHttpInfo (string carrierId, UnlinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of CancelShipmentResponse</returns>
        System.Threading.Tasks.Task<CancelShipmentResponse> CancelShipmentAsync (string shipmentId, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (CancelShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelShipmentResponse>> CancelShipmentAsyncWithHttpInfo (string shipmentId, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will be used to create claim for single eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for the createClaim operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of CreateClaimResponse</returns>
        System.Threading.Tasks.Task<CreateClaimResponse> CreateClaimAsync (CreateClaimRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will be used to create claim for single eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for the createClaim operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (CreateClaimResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClaimResponse>> CreateClaimAsyncWithHttpInfo (CreateClaimRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">DirectPurchaseRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="locale">The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags.  (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of DirectPurchaseResponse</returns>
        System.Threading.Tasks.Task<DirectPurchaseResponse> DirectPurchaseShipmentAsync (DirectPurchaseRequest body, string? xAmznIdempotencyKey = null, string? locale = null, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">DirectPurchaseRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="locale">The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags.  (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (DirectPurchaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DirectPurchaseResponse>> DirectPurchaseShipmentAsyncWithHttpInfo (DirectPurchaseRequest body, string? xAmznIdempotencyKey = null, string? locale = null, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GenerateCollectionFormRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GenerateCollectionFormResponse</returns>
        System.Threading.Tasks.Task<GenerateCollectionFormResponse> GenerateCollectionFormAsync (GenerateCollectionFormRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GenerateCollectionFormRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GenerateCollectionFormResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateCollectionFormResponse>> GenerateCollectionFormAsyncWithHttpInfo (GenerateCollectionFormRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessPointTypes">Access point types</param>
        /// <param name="countryCode">Country code for access point</param>
        /// <param name="postalCode">postal code for access point</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetAccessPointsResponse</returns>
        System.Threading.Tasks.Task<GetAccessPointsResponse> GetAccessPointsAsync (List<string> accessPointTypes, string countryCode, string postalCode, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessPointTypes">Access point types</param>
        /// <param name="countryCode">Country code for access point</param>
        /// <param name="postalCode">postal code for access point</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetAccessPointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAccessPointsResponse>> GetAccessPointsAsyncWithHttpInfo (List<string> accessPointTypes, string countryCode, string postalCode, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestToken">The request token returned in the response to the getRates operation.</param>
        /// <param name="rateId">The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetAdditionalInputsResponse</returns>
        System.Threading.Tasks.Task<GetAdditionalInputsResponse> GetAdditionalInputsAsync (string requestToken, string rateId, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestToken">The request token returned in the response to the getRates operation.</param>
        /// <param name="rateId">The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetAdditionalInputsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAdditionalInputsResponse>> GetAdditionalInputsAsyncWithHttpInfo (string requestToken, string rateId, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetCarrierAccountFormInputsResponse</returns>
        System.Threading.Tasks.Task<GetCarrierAccountFormInputsResponse> GetCarrierAccountFormInputsAsync (string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetCarrierAccountFormInputsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCarrierAccountFormInputsResponse>> GetCarrierAccountFormInputsAsyncWithHttpInfo (string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCarrierAccountsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetCarrierAccountsResponse</returns>
        System.Threading.Tasks.Task<GetCarrierAccountsResponse> GetCarrierAccountsAsync (GetCarrierAccountsRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCarrierAccountsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetCarrierAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCarrierAccountsResponse>> GetCarrierAccountsAsyncWithHttpInfo (GetCarrierAccountsRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFormId">collection form Id to reprint a collection.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetCollectionFormResponse</returns>
        System.Threading.Tasks.Task<GetCollectionFormResponse> GetCollectionFormAsync (string collectionFormId, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFormId">collection form Id to reprint a collection.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetCollectionFormResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCollectionFormResponse>> GetCollectionFormAsyncWithHttpInfo (string collectionFormId, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCollectionFormHistoryRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetCollectionFormHistoryResponse</returns>
        System.Threading.Tasks.Task<GetCollectionFormHistoryResponse> GetCollectionFormHistoryAsync (GetCollectionFormHistoryRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCollectionFormHistoryRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetCollectionFormHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCollectionFormHistoryResponse>> GetCollectionFormHistoryAsyncWithHttpInfo (GetCollectionFormHistoryRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetRatesRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetRatesResponse</returns>
        System.Threading.Tasks.Task<GetRatesResponse> GetRatesAsync (GetRatesRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetRatesRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetRatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRatesResponse>> GetRatesAsyncWithHttpInfo (GetRatesRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="packageClientReferenceId">The package client reference identifier originally provided in the request body parameter for the getRates operation.</param>
        /// <param name="format">The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)</param>
        /// <param name="dpi">The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetShipmentDocumentsResponse</returns>
        System.Threading.Tasks.Task<GetShipmentDocumentsResponse> GetShipmentDocumentsAsync (string shipmentId, string packageClientReferenceId, string? format = null, decimal? dpi = null, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="packageClientReferenceId">The package client reference identifier originally provided in the request body parameter for the getRates operation.</param>
        /// <param name="format">The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)</param>
        /// <param name="dpi">The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipmentDocumentsResponse>> GetShipmentDocumentsAsyncWithHttpInfo (string shipmentId, string packageClientReferenceId, string? format = null, decimal? dpi = null, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingId">A carrier-generated tracking identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="carrierId">A carrier identifier originally returned by the getRates operation for the selected rate.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetTrackingResponse</returns>
        System.Threading.Tasks.Task<GetTrackingResponse> GetTrackingAsync (string trackingId, string carrierId, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingId">A carrier-generated tracking identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="carrierId">A carrier identifier originally returned by the getRates operation for the selected rate.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetTrackingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTrackingResponse>> GetTrackingAsyncWithHttpInfo (string trackingId, string carrierId, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetUmanifestedShipmentsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetUnmanifestedShipmentsResponse</returns>
        System.Threading.Tasks.Task<GetUnmanifestedShipmentsResponse> GetUnmanifestedShipmentsAsync (GetUnmanifestedShipmentsRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetUmanifestedShipmentsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetUnmanifestedShipmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUnmanifestedShipmentsResponse>> GetUnmanifestedShipmentsAsyncWithHttpInfo (GetUnmanifestedShipmentsRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of LinkCarrierAccountResponse</returns>
        System.Threading.Tasks.Task<LinkCarrierAccountResponse> LinkCarrierAccountAsync (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (LinkCarrierAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkCarrierAccountResponse>> LinkCarrierAccountAsyncWithHttpInfo (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of LinkCarrierAccountResponse</returns>
        System.Threading.Tasks.Task<LinkCarrierAccountResponse> LinkCarrierAccount_0Async (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (LinkCarrierAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkCarrierAccountResponse>> LinkCarrierAccount_0AsyncWithHttpInfo (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OneClickShipmentRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of OneClickShipmentResponse</returns>
        System.Threading.Tasks.Task<OneClickShipmentResponse> OneClickShipmentAsync (OneClickShipmentRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OneClickShipmentRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (OneClickShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OneClickShipmentResponse>> OneClickShipmentAsyncWithHttpInfo (OneClickShipmentRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \&quot;TOKEN_EXPIRED\&quot;. If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PurchaseShipmentRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of PurchaseShipmentResponse</returns>
        System.Threading.Tasks.Task<PurchaseShipmentResponse> PurchaseShipmentAsync (PurchaseShipmentRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \&quot;TOKEN_EXPIRED\&quot;. If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PurchaseShipmentRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (PurchaseShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseShipmentResponse>> PurchaseShipmentAsyncWithHttpInfo (PurchaseShipmentRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API submits the NDR (Non-delivery Report) Feedback for any eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for ndrFeedback operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitNdrFeedbackAsync (SubmitNdrFeedbackRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API submits the NDR (Non-delivery Report) Feedback for any eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for ndrFeedback operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitNdrFeedbackAsyncWithHttpInfo (SubmitNdrFeedbackRequest body, string? xAmznShippingBusinessId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">carrier Id to unlink with merchant.</param>
        /// <param name="body">UnlinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of UnlinkCarrierAccountResponse</returns>
        System.Threading.Tasks.Task<UnlinkCarrierAccountResponse> UnlinkCarrierAccountAsync (string carrierId, UnlinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">carrier Id to unlink with merchant.</param>
        /// <param name="body">UnlinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (UnlinkCarrierAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnlinkCarrierAccountResponse>> UnlinkCarrierAccountAsyncWithHttpInfo (string carrierId, UnlinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShippingApi : IShippingApi
    {
        private software.amzn.spapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShippingApi(software.amzn.spapi.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = software.amzn.spapi.Client.Configuration.DefaultExceptionFactory;
        }

        IReadableConfiguration IApiAccessor.Configuration 
        {
            get => Configuration;  // Implicit upcast to interface
            set => Configuration = (software.amzn.spapi.Client.Configuration)value;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public software.amzn.spapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public software.amzn.spapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>CancelShipmentResponse</returns>
        public CancelShipmentResponse CancelShipment (string shipmentId, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<CancelShipmentResponse> localVarResponse = CancelShipmentWithHttpInfo(shipmentId, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of CancelShipmentResponse</returns>
        public ApiResponse< CancelShipmentResponse > CancelShipmentWithHttpInfo (string shipmentId, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShippingApi->CancelShipment");

            var localVarPath = "/shipping/v2/shipments/{shipmentId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelShipmentResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (CancelShipmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelShipmentResponse)));
        }

        /// <summary>
        ///  Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of CancelShipmentResponse</returns>
        public async System.Threading.Tasks.Task<CancelShipmentResponse> CancelShipmentAsync (string shipmentId, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<CancelShipmentResponse> localVarResponse = await CancelShipmentAsyncWithHttpInfo(shipmentId, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (CancelShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelShipmentResponse>> CancelShipmentAsyncWithHttpInfo (string shipmentId, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShippingApi->CancelShipment");

            var localVarPath = "/shipping/v2/shipments/{shipmentId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelShipmentResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (CancelShipmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelShipmentResponse)));
        }

        /// <summary>
        ///  This API will be used to create claim for single eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for the createClaim operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>CreateClaimResponse</returns>
        public CreateClaimResponse CreateClaim (CreateClaimRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<CreateClaimResponse> localVarResponse = CreateClaimWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This API will be used to create claim for single eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for the createClaim operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of CreateClaimResponse</returns>
        public ApiResponse< CreateClaimResponse > CreateClaimWithHttpInfo (CreateClaimRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->CreateClaim");

            var localVarPath = "/shipping/v2/claims";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClaim", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateClaimResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (CreateClaimResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateClaimResponse)));
        }

        /// <summary>
        ///  This API will be used to create claim for single eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for the createClaim operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of CreateClaimResponse</returns>
        public async System.Threading.Tasks.Task<CreateClaimResponse> CreateClaimAsync (CreateClaimRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<CreateClaimResponse> localVarResponse = await CreateClaimAsyncWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This API will be used to create claim for single eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for the createClaim operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (CreateClaimResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateClaimResponse>> CreateClaimAsyncWithHttpInfo (CreateClaimRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->CreateClaim");

            var localVarPath = "/shipping/v2/claims";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClaim", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateClaimResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (CreateClaimResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateClaimResponse)));
        }

        /// <summary>
        ///  Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">DirectPurchaseRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="locale">The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags.  (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>DirectPurchaseResponse</returns>
        public DirectPurchaseResponse DirectPurchaseShipment (DirectPurchaseRequest body, string? xAmznIdempotencyKey = null, string? locale = null, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<DirectPurchaseResponse> localVarResponse = DirectPurchaseShipmentWithHttpInfo(body, xAmznIdempotencyKey, locale, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">DirectPurchaseRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="locale">The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags.  (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of DirectPurchaseResponse</returns>
        public ApiResponse< DirectPurchaseResponse > DirectPurchaseShipmentWithHttpInfo (DirectPurchaseRequest body, string? xAmznIdempotencyKey = null, string? locale = null, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->DirectPurchaseShipment");

            var localVarPath = "/shipping/v2/shipments/directPurchase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznIdempotencyKey != null) localVarHeaderParams.Add("x-amzn-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xAmznIdempotencyKey)); // header parameter
            if (locale != null) localVarHeaderParams.Add("locale", this.Configuration.ApiClient.ParameterToString(locale)); // header parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectPurchaseShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DirectPurchaseResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (DirectPurchaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DirectPurchaseResponse)));
        }

        /// <summary>
        ///  Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">DirectPurchaseRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="locale">The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags.  (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of DirectPurchaseResponse</returns>
        public async System.Threading.Tasks.Task<DirectPurchaseResponse> DirectPurchaseShipmentAsync (DirectPurchaseRequest body, string? xAmznIdempotencyKey = null, string? locale = null, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<DirectPurchaseResponse> localVarResponse = await DirectPurchaseShipmentAsyncWithHttpInfo(body, xAmznIdempotencyKey, locale, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">DirectPurchaseRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="locale">The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags.  (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (DirectPurchaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DirectPurchaseResponse>> DirectPurchaseShipmentAsyncWithHttpInfo (DirectPurchaseRequest body, string? xAmznIdempotencyKey = null, string? locale = null, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->DirectPurchaseShipment");

            var localVarPath = "/shipping/v2/shipments/directPurchase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznIdempotencyKey != null) localVarHeaderParams.Add("x-amzn-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xAmznIdempotencyKey)); // header parameter
            if (locale != null) localVarHeaderParams.Add("locale", this.Configuration.ApiClient.ParameterToString(locale)); // header parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectPurchaseShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DirectPurchaseResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (DirectPurchaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DirectPurchaseResponse)));
        }

        /// <summary>
        ///  This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GenerateCollectionFormRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GenerateCollectionFormResponse</returns>
        public GenerateCollectionFormResponse GenerateCollectionForm (GenerateCollectionFormRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GenerateCollectionFormResponse> localVarResponse = GenerateCollectionFormWithHttpInfo(body, xAmznIdempotencyKey, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GenerateCollectionFormRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GenerateCollectionFormResponse</returns>
        public ApiResponse< GenerateCollectionFormResponse > GenerateCollectionFormWithHttpInfo (GenerateCollectionFormRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->GenerateCollectionForm");

            var localVarPath = "/shipping/v2/collectionForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznIdempotencyKey != null) localVarHeaderParams.Add("x-amzn-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xAmznIdempotencyKey)); // header parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateCollectionForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateCollectionFormResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GenerateCollectionFormResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateCollectionFormResponse)));
        }

        /// <summary>
        ///  This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GenerateCollectionFormRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GenerateCollectionFormResponse</returns>
        public async System.Threading.Tasks.Task<GenerateCollectionFormResponse> GenerateCollectionFormAsync (GenerateCollectionFormRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GenerateCollectionFormResponse> localVarResponse = await GenerateCollectionFormAsyncWithHttpInfo(body, xAmznIdempotencyKey, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GenerateCollectionFormRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GenerateCollectionFormResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenerateCollectionFormResponse>> GenerateCollectionFormAsyncWithHttpInfo (GenerateCollectionFormRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->GenerateCollectionForm");

            var localVarPath = "/shipping/v2/collectionForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznIdempotencyKey != null) localVarHeaderParams.Add("x-amzn-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xAmznIdempotencyKey)); // header parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateCollectionForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateCollectionFormResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GenerateCollectionFormResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateCollectionFormResponse)));
        }

        /// <summary>
        ///  Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessPointTypes">Access point types</param>
        /// <param name="countryCode">Country code for access point</param>
        /// <param name="postalCode">postal code for access point</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetAccessPointsResponse</returns>
        public GetAccessPointsResponse GetAccessPoints (List<string> accessPointTypes, string countryCode, string postalCode, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetAccessPointsResponse> localVarResponse = GetAccessPointsWithHttpInfo(accessPointTypes, countryCode, postalCode, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessPointTypes">Access point types</param>
        /// <param name="countryCode">Country code for access point</param>
        /// <param name="postalCode">postal code for access point</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetAccessPointsResponse</returns>
        public ApiResponse< GetAccessPointsResponse > GetAccessPointsWithHttpInfo (List<string> accessPointTypes, string countryCode, string postalCode, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'accessPointTypes' is set
            if (accessPointTypes == null)
                throw new ApiException(400, "Missing required parameter 'accessPointTypes' when calling ShippingApi->GetAccessPoints");
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling ShippingApi->GetAccessPoints");
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling ShippingApi->GetAccessPoints");

            var localVarPath = "/shipping/v2/accessPoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessPointTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "accessPointTypes", accessPointTypes)); // query parameter
            if (countryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "countryCode", countryCode)); // query parameter
            if (postalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postalCode", postalCode)); // query parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAccessPointsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetAccessPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAccessPointsResponse)));
        }

        /// <summary>
        ///  Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessPointTypes">Access point types</param>
        /// <param name="countryCode">Country code for access point</param>
        /// <param name="postalCode">postal code for access point</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetAccessPointsResponse</returns>
        public async System.Threading.Tasks.Task<GetAccessPointsResponse> GetAccessPointsAsync (List<string> accessPointTypes, string countryCode, string postalCode, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetAccessPointsResponse> localVarResponse = await GetAccessPointsAsyncWithHttpInfo(accessPointTypes, countryCode, postalCode, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessPointTypes">Access point types</param>
        /// <param name="countryCode">Country code for access point</param>
        /// <param name="postalCode">postal code for access point</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetAccessPointsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAccessPointsResponse>> GetAccessPointsAsyncWithHttpInfo (List<string> accessPointTypes, string countryCode, string postalCode, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'accessPointTypes' is set
            if (accessPointTypes == null)
                throw new ApiException(400, "Missing required parameter 'accessPointTypes' when calling ShippingApi->GetAccessPoints");
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling ShippingApi->GetAccessPoints");
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling ShippingApi->GetAccessPoints");

            var localVarPath = "/shipping/v2/accessPoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessPointTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "accessPointTypes", accessPointTypes)); // query parameter
            if (countryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "countryCode", countryCode)); // query parameter
            if (postalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postalCode", postalCode)); // query parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAccessPointsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetAccessPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAccessPointsResponse)));
        }

        /// <summary>
        ///  Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestToken">The request token returned in the response to the getRates operation.</param>
        /// <param name="rateId">The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetAdditionalInputsResponse</returns>
        public GetAdditionalInputsResponse GetAdditionalInputs (string requestToken, string rateId, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetAdditionalInputsResponse> localVarResponse = GetAdditionalInputsWithHttpInfo(requestToken, rateId, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestToken">The request token returned in the response to the getRates operation.</param>
        /// <param name="rateId">The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetAdditionalInputsResponse</returns>
        public ApiResponse< GetAdditionalInputsResponse > GetAdditionalInputsWithHttpInfo (string requestToken, string rateId, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'requestToken' is set
            if (requestToken == null)
                throw new ApiException(400, "Missing required parameter 'requestToken' when calling ShippingApi->GetAdditionalInputs");
            // verify the required parameter 'rateId' is set
            if (rateId == null)
                throw new ApiException(400, "Missing required parameter 'rateId' when calling ShippingApi->GetAdditionalInputs");

            var localVarPath = "/shipping/v2/shipments/additionalInputs/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestToken", requestToken)); // query parameter
            if (rateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rateId", rateId)); // query parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdditionalInputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAdditionalInputsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetAdditionalInputsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAdditionalInputsResponse)));
        }

        /// <summary>
        ///  Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestToken">The request token returned in the response to the getRates operation.</param>
        /// <param name="rateId">The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetAdditionalInputsResponse</returns>
        public async System.Threading.Tasks.Task<GetAdditionalInputsResponse> GetAdditionalInputsAsync (string requestToken, string rateId, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetAdditionalInputsResponse> localVarResponse = await GetAdditionalInputsAsyncWithHttpInfo(requestToken, rateId, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestToken">The request token returned in the response to the getRates operation.</param>
        /// <param name="rateId">The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetAdditionalInputsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAdditionalInputsResponse>> GetAdditionalInputsAsyncWithHttpInfo (string requestToken, string rateId, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'requestToken' is set
            if (requestToken == null)
                throw new ApiException(400, "Missing required parameter 'requestToken' when calling ShippingApi->GetAdditionalInputs");
            // verify the required parameter 'rateId' is set
            if (rateId == null)
                throw new ApiException(400, "Missing required parameter 'rateId' when calling ShippingApi->GetAdditionalInputs");

            var localVarPath = "/shipping/v2/shipments/additionalInputs/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestToken", requestToken)); // query parameter
            if (rateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rateId", rateId)); // query parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdditionalInputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAdditionalInputsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetAdditionalInputsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAdditionalInputsResponse)));
        }

        /// <summary>
        ///  This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetCarrierAccountFormInputsResponse</returns>
        public GetCarrierAccountFormInputsResponse GetCarrierAccountFormInputs (string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetCarrierAccountFormInputsResponse> localVarResponse = GetCarrierAccountFormInputsWithHttpInfo(xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetCarrierAccountFormInputsResponse</returns>
        public ApiResponse< GetCarrierAccountFormInputsResponse > GetCarrierAccountFormInputsWithHttpInfo (string? xAmznShippingBusinessId = null)
        {

            var localVarPath = "/shipping/v2/carrierAccountFormInputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierAccountFormInputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCarrierAccountFormInputsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetCarrierAccountFormInputsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCarrierAccountFormInputsResponse)));
        }

        /// <summary>
        ///  This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetCarrierAccountFormInputsResponse</returns>
        public async System.Threading.Tasks.Task<GetCarrierAccountFormInputsResponse> GetCarrierAccountFormInputsAsync (string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetCarrierAccountFormInputsResponse> localVarResponse = await GetCarrierAccountFormInputsAsyncWithHttpInfo(xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetCarrierAccountFormInputsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCarrierAccountFormInputsResponse>> GetCarrierAccountFormInputsAsyncWithHttpInfo (string? xAmznShippingBusinessId = null)
        {

            var localVarPath = "/shipping/v2/carrierAccountFormInputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierAccountFormInputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCarrierAccountFormInputsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetCarrierAccountFormInputsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCarrierAccountFormInputsResponse)));
        }

        /// <summary>
        ///  This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCarrierAccountsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetCarrierAccountsResponse</returns>
        public GetCarrierAccountsResponse GetCarrierAccounts (GetCarrierAccountsRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetCarrierAccountsResponse> localVarResponse = GetCarrierAccountsWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCarrierAccountsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetCarrierAccountsResponse</returns>
        public ApiResponse< GetCarrierAccountsResponse > GetCarrierAccountsWithHttpInfo (GetCarrierAccountsRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->GetCarrierAccounts");

            var localVarPath = "/shipping/v2/carrierAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCarrierAccountsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetCarrierAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCarrierAccountsResponse)));
        }

        /// <summary>
        ///  This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCarrierAccountsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetCarrierAccountsResponse</returns>
        public async System.Threading.Tasks.Task<GetCarrierAccountsResponse> GetCarrierAccountsAsync (GetCarrierAccountsRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetCarrierAccountsResponse> localVarResponse = await GetCarrierAccountsAsyncWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCarrierAccountsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetCarrierAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCarrierAccountsResponse>> GetCarrierAccountsAsyncWithHttpInfo (GetCarrierAccountsRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->GetCarrierAccounts");

            var localVarPath = "/shipping/v2/carrierAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCarrierAccountsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetCarrierAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCarrierAccountsResponse)));
        }

        /// <summary>
        ///  This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFormId">collection form Id to reprint a collection.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetCollectionFormResponse</returns>
        public GetCollectionFormResponse GetCollectionForm (string collectionFormId, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetCollectionFormResponse> localVarResponse = GetCollectionFormWithHttpInfo(collectionFormId, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFormId">collection form Id to reprint a collection.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetCollectionFormResponse</returns>
        public ApiResponse< GetCollectionFormResponse > GetCollectionFormWithHttpInfo (string collectionFormId, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'collectionFormId' is set
            if (collectionFormId == null)
                throw new ApiException(400, "Missing required parameter 'collectionFormId' when calling ShippingApi->GetCollectionForm");

            var localVarPath = "/shipping/v2/collectionForms/{collectionFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionFormId != null) localVarPathParams.Add("collectionFormId", this.Configuration.ApiClient.ParameterToString(collectionFormId)); // path parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCollectionFormResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetCollectionFormResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCollectionFormResponse)));
        }

        /// <summary>
        ///  This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFormId">collection form Id to reprint a collection.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetCollectionFormResponse</returns>
        public async System.Threading.Tasks.Task<GetCollectionFormResponse> GetCollectionFormAsync (string collectionFormId, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetCollectionFormResponse> localVarResponse = await GetCollectionFormAsyncWithHttpInfo(collectionFormId, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFormId">collection form Id to reprint a collection.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetCollectionFormResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCollectionFormResponse>> GetCollectionFormAsyncWithHttpInfo (string collectionFormId, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'collectionFormId' is set
            if (collectionFormId == null)
                throw new ApiException(400, "Missing required parameter 'collectionFormId' when calling ShippingApi->GetCollectionForm");

            var localVarPath = "/shipping/v2/collectionForms/{collectionFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionFormId != null) localVarPathParams.Add("collectionFormId", this.Configuration.ApiClient.ParameterToString(collectionFormId)); // path parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCollectionFormResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetCollectionFormResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCollectionFormResponse)));
        }

        /// <summary>
        ///  This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCollectionFormHistoryRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetCollectionFormHistoryResponse</returns>
        public GetCollectionFormHistoryResponse GetCollectionFormHistory (GetCollectionFormHistoryRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetCollectionFormHistoryResponse> localVarResponse = GetCollectionFormHistoryWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCollectionFormHistoryRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetCollectionFormHistoryResponse</returns>
        public ApiResponse< GetCollectionFormHistoryResponse > GetCollectionFormHistoryWithHttpInfo (GetCollectionFormHistoryRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->GetCollectionFormHistory");

            var localVarPath = "/shipping/v2/collectionForms/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionFormHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCollectionFormHistoryResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetCollectionFormHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCollectionFormHistoryResponse)));
        }

        /// <summary>
        ///  This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCollectionFormHistoryRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetCollectionFormHistoryResponse</returns>
        public async System.Threading.Tasks.Task<GetCollectionFormHistoryResponse> GetCollectionFormHistoryAsync (GetCollectionFormHistoryRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetCollectionFormHistoryResponse> localVarResponse = await GetCollectionFormHistoryAsyncWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetCollectionFormHistoryRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetCollectionFormHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCollectionFormHistoryResponse>> GetCollectionFormHistoryAsyncWithHttpInfo (GetCollectionFormHistoryRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->GetCollectionFormHistory");

            var localVarPath = "/shipping/v2/collectionForms/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionFormHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCollectionFormHistoryResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetCollectionFormHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCollectionFormHistoryResponse)));
        }

        /// <summary>
        ///  Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetRatesRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetRatesResponse</returns>
        public GetRatesResponse GetRates (GetRatesRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetRatesResponse> localVarResponse = GetRatesWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetRatesRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetRatesResponse</returns>
        public ApiResponse< GetRatesResponse > GetRatesWithHttpInfo (GetRatesRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->GetRates");

            var localVarPath = "/shipping/v2/shipments/rates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRatesResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetRatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRatesResponse)));
        }

        /// <summary>
        ///  Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetRatesRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetRatesResponse</returns>
        public async System.Threading.Tasks.Task<GetRatesResponse> GetRatesAsync (GetRatesRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetRatesResponse> localVarResponse = await GetRatesAsyncWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetRatesRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetRatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRatesResponse>> GetRatesAsyncWithHttpInfo (GetRatesRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->GetRates");

            var localVarPath = "/shipping/v2/shipments/rates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRatesResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetRatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRatesResponse)));
        }

        /// <summary>
        ///  Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="packageClientReferenceId">The package client reference identifier originally provided in the request body parameter for the getRates operation.</param>
        /// <param name="format">The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)</param>
        /// <param name="dpi">The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetShipmentDocumentsResponse</returns>
        public GetShipmentDocumentsResponse GetShipmentDocuments (string shipmentId, string packageClientReferenceId, string? format = null, decimal? dpi = null, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetShipmentDocumentsResponse> localVarResponse = GetShipmentDocumentsWithHttpInfo(shipmentId, packageClientReferenceId, format, dpi, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="packageClientReferenceId">The package client reference identifier originally provided in the request body parameter for the getRates operation.</param>
        /// <param name="format">The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)</param>
        /// <param name="dpi">The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetShipmentDocumentsResponse</returns>
        public ApiResponse< GetShipmentDocumentsResponse > GetShipmentDocumentsWithHttpInfo (string shipmentId, string packageClientReferenceId, string? format = null, decimal? dpi = null, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShippingApi->GetShipmentDocuments");
            // verify the required parameter 'packageClientReferenceId' is set
            if (packageClientReferenceId == null)
                throw new ApiException(400, "Missing required parameter 'packageClientReferenceId' when calling ShippingApi->GetShipmentDocuments");

            var localVarPath = "/shipping/v2/shipments/{shipmentId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (packageClientReferenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "packageClientReferenceId", packageClientReferenceId)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (dpi != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dpi", dpi)); // query parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentDocumentsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetShipmentDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentDocumentsResponse)));
        }

        /// <summary>
        ///  Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="packageClientReferenceId">The package client reference identifier originally provided in the request body parameter for the getRates operation.</param>
        /// <param name="format">The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)</param>
        /// <param name="dpi">The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetShipmentDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<GetShipmentDocumentsResponse> GetShipmentDocumentsAsync (string shipmentId, string packageClientReferenceId, string? format = null, decimal? dpi = null, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetShipmentDocumentsResponse> localVarResponse = await GetShipmentDocumentsAsyncWithHttpInfo(shipmentId, packageClientReferenceId, format, dpi, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipment identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="packageClientReferenceId">The package client reference identifier originally provided in the request body parameter for the getRates operation.</param>
        /// <param name="format">The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)</param>
        /// <param name="dpi">The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetShipmentDocumentsResponse>> GetShipmentDocumentsAsyncWithHttpInfo (string shipmentId, string packageClientReferenceId, string? format = null, decimal? dpi = null, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShippingApi->GetShipmentDocuments");
            // verify the required parameter 'packageClientReferenceId' is set
            if (packageClientReferenceId == null)
                throw new ApiException(400, "Missing required parameter 'packageClientReferenceId' when calling ShippingApi->GetShipmentDocuments");

            var localVarPath = "/shipping/v2/shipments/{shipmentId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (packageClientReferenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "packageClientReferenceId", packageClientReferenceId)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (dpi != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dpi", dpi)); // query parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentDocumentsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetShipmentDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentDocumentsResponse)));
        }

        /// <summary>
        ///  Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingId">A carrier-generated tracking identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="carrierId">A carrier identifier originally returned by the getRates operation for the selected rate.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetTrackingResponse</returns>
        public GetTrackingResponse GetTracking (string trackingId, string carrierId, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetTrackingResponse> localVarResponse = GetTrackingWithHttpInfo(trackingId, carrierId, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingId">A carrier-generated tracking identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="carrierId">A carrier identifier originally returned by the getRates operation for the selected rate.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetTrackingResponse</returns>
        public ApiResponse< GetTrackingResponse > GetTrackingWithHttpInfo (string trackingId, string carrierId, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'trackingId' is set
            if (trackingId == null)
                throw new ApiException(400, "Missing required parameter 'trackingId' when calling ShippingApi->GetTracking");
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
                throw new ApiException(400, "Missing required parameter 'carrierId' when calling ShippingApi->GetTracking");

            var localVarPath = "/shipping/v2/tracking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trackingId", trackingId)); // query parameter
            if (carrierId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "carrierId", carrierId)); // query parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTrackingResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetTrackingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTrackingResponse)));
        }

        /// <summary>
        ///  Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingId">A carrier-generated tracking identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="carrierId">A carrier identifier originally returned by the getRates operation for the selected rate.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetTrackingResponse</returns>
        public async System.Threading.Tasks.Task<GetTrackingResponse> GetTrackingAsync (string trackingId, string carrierId, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetTrackingResponse> localVarResponse = await GetTrackingAsyncWithHttpInfo(trackingId, carrierId, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingId">A carrier-generated tracking identifier originally returned by the purchaseShipment operation.</param>
        /// <param name="carrierId">A carrier identifier originally returned by the getRates operation for the selected rate.</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetTrackingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTrackingResponse>> GetTrackingAsyncWithHttpInfo (string trackingId, string carrierId, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'trackingId' is set
            if (trackingId == null)
                throw new ApiException(400, "Missing required parameter 'trackingId' when calling ShippingApi->GetTracking");
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
                throw new ApiException(400, "Missing required parameter 'carrierId' when calling ShippingApi->GetTracking");

            var localVarPath = "/shipping/v2/tracking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trackingId", trackingId)); // query parameter
            if (carrierId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "carrierId", carrierId)); // query parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTrackingResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetTrackingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTrackingResponse)));
        }

        /// <summary>
        ///  This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetUmanifestedShipmentsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>GetUnmanifestedShipmentsResponse</returns>
        public GetUnmanifestedShipmentsResponse GetUnmanifestedShipments (GetUnmanifestedShipmentsRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetUnmanifestedShipmentsResponse> localVarResponse = GetUnmanifestedShipmentsWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetUmanifestedShipmentsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of GetUnmanifestedShipmentsResponse</returns>
        public ApiResponse< GetUnmanifestedShipmentsResponse > GetUnmanifestedShipmentsWithHttpInfo (GetUnmanifestedShipmentsRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->GetUnmanifestedShipments");

            var localVarPath = "/shipping/v2/unmanifestedShipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnmanifestedShipments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnmanifestedShipmentsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetUnmanifestedShipmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnmanifestedShipmentsResponse)));
        }

        /// <summary>
        ///  This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetUmanifestedShipmentsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of GetUnmanifestedShipmentsResponse</returns>
        public async System.Threading.Tasks.Task<GetUnmanifestedShipmentsResponse> GetUnmanifestedShipmentsAsync (GetUnmanifestedShipmentsRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<GetUnmanifestedShipmentsResponse> localVarResponse = await GetUnmanifestedShipmentsAsyncWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">GetUmanifestedShipmentsRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (GetUnmanifestedShipmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUnmanifestedShipmentsResponse>> GetUnmanifestedShipmentsAsyncWithHttpInfo (GetUnmanifestedShipmentsRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->GetUnmanifestedShipments");

            var localVarPath = "/shipping/v2/unmanifestedShipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnmanifestedShipments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnmanifestedShipmentsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetUnmanifestedShipmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnmanifestedShipmentsResponse)));
        }

        /// <summary>
        ///  This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>LinkCarrierAccountResponse</returns>
        public LinkCarrierAccountResponse LinkCarrierAccount (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<LinkCarrierAccountResponse> localVarResponse = LinkCarrierAccountWithHttpInfo(carrierId, body, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of LinkCarrierAccountResponse</returns>
        public ApiResponse< LinkCarrierAccountResponse > LinkCarrierAccountWithHttpInfo (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
                throw new ApiException(400, "Missing required parameter 'carrierId' when calling ShippingApi->LinkCarrierAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->LinkCarrierAccount");

            var localVarPath = "/shipping/v2/carrierAccounts/{carrierId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrierId != null) localVarPathParams.Add("carrierId", this.Configuration.ApiClient.ParameterToString(carrierId)); // path parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkCarrierAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkCarrierAccountResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (LinkCarrierAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LinkCarrierAccountResponse)));
        }

        /// <summary>
        ///  This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of LinkCarrierAccountResponse</returns>
        public async System.Threading.Tasks.Task<LinkCarrierAccountResponse> LinkCarrierAccountAsync (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<LinkCarrierAccountResponse> localVarResponse = await LinkCarrierAccountAsyncWithHttpInfo(carrierId, body, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (LinkCarrierAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkCarrierAccountResponse>> LinkCarrierAccountAsyncWithHttpInfo (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
                throw new ApiException(400, "Missing required parameter 'carrierId' when calling ShippingApi->LinkCarrierAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->LinkCarrierAccount");

            var localVarPath = "/shipping/v2/carrierAccounts/{carrierId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrierId != null) localVarPathParams.Add("carrierId", this.Configuration.ApiClient.ParameterToString(carrierId)); // path parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkCarrierAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkCarrierAccountResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (LinkCarrierAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LinkCarrierAccountResponse)));
        }

        /// <summary>
        ///  This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>LinkCarrierAccountResponse</returns>
        public LinkCarrierAccountResponse LinkCarrierAccount_0 (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<LinkCarrierAccountResponse> localVarResponse = LinkCarrierAccount_0WithHttpInfo(carrierId, body, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of LinkCarrierAccountResponse</returns>
        public ApiResponse< LinkCarrierAccountResponse > LinkCarrierAccount_0WithHttpInfo (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
                throw new ApiException(400, "Missing required parameter 'carrierId' when calling ShippingApi->LinkCarrierAccount_0");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->LinkCarrierAccount_0");

            var localVarPath = "/shipping/v2/carrierAccounts/{carrierId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrierId != null) localVarPathParams.Add("carrierId", this.Configuration.ApiClient.ParameterToString(carrierId)); // path parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkCarrierAccount_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkCarrierAccountResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (LinkCarrierAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LinkCarrierAccountResponse)));
        }

        /// <summary>
        ///  This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of LinkCarrierAccountResponse</returns>
        public async System.Threading.Tasks.Task<LinkCarrierAccountResponse> LinkCarrierAccount_0Async (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<LinkCarrierAccountResponse> localVarResponse = await LinkCarrierAccount_0AsyncWithHttpInfo(carrierId, body, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">An identifier for the carrier with which the seller&#39;s account is being linked.</param>
        /// <param name="body">LinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (LinkCarrierAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkCarrierAccountResponse>> LinkCarrierAccount_0AsyncWithHttpInfo (string carrierId, LinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
                throw new ApiException(400, "Missing required parameter 'carrierId' when calling ShippingApi->LinkCarrierAccount_0");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->LinkCarrierAccount_0");

            var localVarPath = "/shipping/v2/carrierAccounts/{carrierId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrierId != null) localVarPathParams.Add("carrierId", this.Configuration.ApiClient.ParameterToString(carrierId)); // path parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkCarrierAccount_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkCarrierAccountResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (LinkCarrierAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LinkCarrierAccountResponse)));
        }

        /// <summary>
        ///  Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OneClickShipmentRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>OneClickShipmentResponse</returns>
        public OneClickShipmentResponse OneClickShipment (OneClickShipmentRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<OneClickShipmentResponse> localVarResponse = OneClickShipmentWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OneClickShipmentRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of OneClickShipmentResponse</returns>
        public ApiResponse< OneClickShipmentResponse > OneClickShipmentWithHttpInfo (OneClickShipmentRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->OneClickShipment");

            var localVarPath = "/shipping/v2/oneClickShipment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OneClickShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OneClickShipmentResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (OneClickShipmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OneClickShipmentResponse)));
        }

        /// <summary>
        ///  Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OneClickShipmentRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of OneClickShipmentResponse</returns>
        public async System.Threading.Tasks.Task<OneClickShipmentResponse> OneClickShipmentAsync (OneClickShipmentRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<OneClickShipmentResponse> localVarResponse = await OneClickShipmentAsyncWithHttpInfo(body, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OneClickShipmentRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (OneClickShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OneClickShipmentResponse>> OneClickShipmentAsyncWithHttpInfo (OneClickShipmentRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->OneClickShipment");

            var localVarPath = "/shipping/v2/oneClickShipment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OneClickShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OneClickShipmentResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (OneClickShipmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OneClickShipmentResponse)));
        }

        /// <summary>
        ///  Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \&quot;TOKEN_EXPIRED\&quot;. If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PurchaseShipmentRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>PurchaseShipmentResponse</returns>
        public PurchaseShipmentResponse PurchaseShipment (PurchaseShipmentRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<PurchaseShipmentResponse> localVarResponse = PurchaseShipmentWithHttpInfo(body, xAmznIdempotencyKey, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \&quot;TOKEN_EXPIRED\&quot;. If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PurchaseShipmentRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of PurchaseShipmentResponse</returns>
        public ApiResponse< PurchaseShipmentResponse > PurchaseShipmentWithHttpInfo (PurchaseShipmentRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->PurchaseShipment");

            var localVarPath = "/shipping/v2/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznIdempotencyKey != null) localVarHeaderParams.Add("x-amzn-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xAmznIdempotencyKey)); // header parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseShipmentResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (PurchaseShipmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseShipmentResponse)));
        }

        /// <summary>
        ///  Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \&quot;TOKEN_EXPIRED\&quot;. If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PurchaseShipmentRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of PurchaseShipmentResponse</returns>
        public async System.Threading.Tasks.Task<PurchaseShipmentResponse> PurchaseShipmentAsync (PurchaseShipmentRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<PurchaseShipmentResponse> localVarResponse = await PurchaseShipmentAsyncWithHttpInfo(body, xAmznIdempotencyKey, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \&quot;TOKEN_EXPIRED\&quot;. If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PurchaseShipmentRequest body</param>
        /// <param name="xAmznIdempotencyKey">A unique value which the server uses to recognize subsequent retries of the same request. (optional)</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (PurchaseShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PurchaseShipmentResponse>> PurchaseShipmentAsyncWithHttpInfo (PurchaseShipmentRequest body, string? xAmznIdempotencyKey = null, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->PurchaseShipment");

            var localVarPath = "/shipping/v2/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznIdempotencyKey != null) localVarHeaderParams.Add("x-amzn-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xAmznIdempotencyKey)); // header parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseShipmentResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (PurchaseShipmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseShipmentResponse)));
        }

        /// <summary>
        ///  This API submits the NDR (Non-delivery Report) Feedback for any eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for ndrFeedback operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns></returns>
        public void SubmitNdrFeedback (SubmitNdrFeedbackRequest body, string? xAmznShippingBusinessId = null)
        {
             SubmitNdrFeedbackWithHttpInfo(body, xAmznShippingBusinessId);
        }

        /// <summary>
        ///  This API submits the NDR (Non-delivery Report) Feedback for any eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for ndrFeedback operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SubmitNdrFeedbackWithHttpInfo (SubmitNdrFeedbackRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->SubmitNdrFeedback");

            var localVarPath = "/shipping/v2/ndrFeedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitNdrFeedback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(
                statusCode: localVarResponse.StatusCode,
                headers: ConvertHeadersToMultimap(localVarResponse),
                data: null);
        }

        /// <summary>
        ///  This API submits the NDR (Non-delivery Report) Feedback for any eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for ndrFeedback operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitNdrFeedbackAsync (SubmitNdrFeedbackRequest body, string? xAmznShippingBusinessId = null)
        {
             await SubmitNdrFeedbackAsyncWithHttpInfo(body, xAmznShippingBusinessId);

        }

        /// <summary>
        ///  This API submits the NDR (Non-delivery Report) Feedback for any eligible shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request body for ndrFeedback operation</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubmitNdrFeedbackAsyncWithHttpInfo (SubmitNdrFeedbackRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->SubmitNdrFeedback");

            var localVarPath = "/shipping/v2/ndrFeedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitNdrFeedback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(
                statusCode: localVarResponse.StatusCode,
                headers: ConvertHeadersToMultimap(localVarResponse),
                data: null);
        }

        /// <summary>
        ///  This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">carrier Id to unlink with merchant.</param>
        /// <param name="body">UnlinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>UnlinkCarrierAccountResponse</returns>
        public UnlinkCarrierAccountResponse UnlinkCarrierAccount (string carrierId, UnlinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<UnlinkCarrierAccountResponse> localVarResponse = UnlinkCarrierAccountWithHttpInfo(carrierId, body, xAmznShippingBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">carrier Id to unlink with merchant.</param>
        /// <param name="body">UnlinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>ApiResponse of UnlinkCarrierAccountResponse</returns>
        public ApiResponse< UnlinkCarrierAccountResponse > UnlinkCarrierAccountWithHttpInfo (string carrierId, UnlinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
                throw new ApiException(400, "Missing required parameter 'carrierId' when calling ShippingApi->UnlinkCarrierAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->UnlinkCarrierAccount");

            var localVarPath = "/shipping/v2/carrierAccounts/{carrierId}/unlink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrierId != null) localVarPathParams.Add("carrierId", this.Configuration.ApiClient.ParameterToString(carrierId)); // path parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlinkCarrierAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnlinkCarrierAccountResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (UnlinkCarrierAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnlinkCarrierAccountResponse)));
        }

        /// <summary>
        ///  This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">carrier Id to unlink with merchant.</param>
        /// <param name="body">UnlinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of UnlinkCarrierAccountResponse</returns>
        public async System.Threading.Tasks.Task<UnlinkCarrierAccountResponse> UnlinkCarrierAccountAsync (string carrierId, UnlinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
             ApiResponse<UnlinkCarrierAccountResponse> localVarResponse = await UnlinkCarrierAccountAsyncWithHttpInfo(carrierId, body, xAmznShippingBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierId">carrier Id to unlink with merchant.</param>
        /// <param name="body">UnlinkCarrierAccountRequest body</param>
        /// <param name="xAmznShippingBusinessId">Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)</param>
        /// <returns>Task of ApiResponse (UnlinkCarrierAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnlinkCarrierAccountResponse>> UnlinkCarrierAccountAsyncWithHttpInfo (string carrierId, UnlinkCarrierAccountRequest body, string? xAmznShippingBusinessId = null)
        {
            // verify the required parameter 'carrierId' is set
            if (carrierId == null)
                throw new ApiException(400, "Missing required parameter 'carrierId' when calling ShippingApi->UnlinkCarrierAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingApi->UnlinkCarrierAccount");

            var localVarPath = "/shipping/v2/carrierAccounts/{carrierId}/unlink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrierId != null) localVarPathParams.Add("carrierId", this.Configuration.ApiClient.ParameterToString(carrierId)); // path parameter
            if (xAmznShippingBusinessId != null) localVarHeaderParams.Add("x-amzn-shipping-business-id", this.Configuration.ApiClient.ParameterToString(xAmznShippingBusinessId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlinkCarrierAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnlinkCarrierAccountResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (UnlinkCarrierAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnlinkCarrierAccountResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public ShippingApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                software.amzn.spapi.Client.Configuration configuration = new software.amzn.spapi.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.initializeApiClient();
                configuration.Timeout = 100000;

                return new ShippingApi(configuration);
            }
        }
        
        private static Multimap<string, string> ConvertHeadersToMultimap(RestResponse response)
        {
            var multimap = new Multimap<string, string>();
            foreach (var header in response.Headers)
            {
                multimap.Add(header.Name, header.Value?.ToString());
            }
            return multimap;
        }


        private static RestSharp.Method ChangeHttpMethod(String httpMethod) {
            switch(httpMethod) {
                case "GET":
                    // GET logic
                    return Method.Get;
                case "POST":
                    // POST logic
                    return Method.Post;
                case "DELETE":
                    return Method.Delete;
                case "PUT":
                    return Method.Put;
                case "PATCH":
                    return Method.Patch;
                case "OPTIONS":
                    return Method.Options;
            }
            return Method.Head;
        }

    }
}
