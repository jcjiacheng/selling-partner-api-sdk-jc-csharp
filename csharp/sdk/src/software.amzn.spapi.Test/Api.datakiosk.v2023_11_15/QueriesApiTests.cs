/*
 * Selling Partner API for Data Kiosk
 *
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2023-11-15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.datakiosk.v2023_11_15;
using software.amzn.spapi.Model.datakiosk.v2023_11_15;

namespace software.amzn.spapi.Api.datakiosk.v2023_11_15.Test
{
    /// <summary>
    ///  Class for testing QueriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class QueriesApiTests
    {
        private QueriesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        public void Init()
        {
            // TODO uncomment below to initialize instance for testing
            //instance = new QueriesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of QueriesApi
        /// </summary>
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' QueriesApi
            //Assert.IsInstanceOfType(typeof(QueriesApi), instance, "instance is a QueriesApi");
        }

        
        /// <summary>
        /// Test CancelQuery
        /// </summary>
        [Fact]
        public void CancelQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queryId = null;
            //instance.CancelQuery(queryId);
            
        }
        
        /// <summary>
        /// Test CreateQuery
        /// </summary>
        [Fact]
        public void CreateQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateQuerySpecification body = null;
            //var response = instance.CreateQuery(body);
            //Assert.IsInstanceOf<CreateQueryResponse> (response, "response is CreateQueryResponse");
        }
        
        /// <summary>
        /// Test GetDocument
        /// </summary>
        [Fact]
        public void GetDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentId = null;
            //var response = instance.GetDocument(documentId);
            //Assert.IsInstanceOf<GetDocumentResponse> (response, "response is GetDocumentResponse");
        }
        
        /// <summary>
        /// Test GetQueries
        /// </summary>
        [Fact]
        public void GetQueriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? processingStatuses = null;
            //int? pageSize = null;
            //DateTime? createdSince = null;
            //DateTime? createdUntil = null;
            //string? paginationToken = null;
            //var response = instance.GetQueries(processingStatusespageSizecreatedSincecreatedUntilpaginationToken);
            //Assert.IsInstanceOf<GetQueriesResponse> (response, "response is GetQueriesResponse");
        }
        
        /// <summary>
        /// Test GetQuery
        /// </summary>
        [Fact]
        public void GetQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queryId = null;
            //var response = instance.GetQuery(queryId);
            //Assert.IsInstanceOf<Query> (response, "response is Query");
        }
        
    }

}
